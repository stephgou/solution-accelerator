{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "suffix": {
            "type": "string",
            "metadata": {
                "description": "Enter a valid email address you want to use to send notification emails from the Logic App."
            }
        },
        "recipientEmail": {
            "type": "string",
            "metadata": {
                "description": "Enter a valid email address you want to use to send notification emails from the Logic App."
            }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "name-suffix": "[parameters('suffix')]",

        "iotHubName": "[concat('iot-hub-', variables('name-suffix'))]",

        "appServicePlanIoTWebAppNameName": "[concat('IoTWebAppNamePlan-', variables('name-suffix'))]",
        "iotWebAppName": "[concat('IoTWebApp-', variables('name-suffix'))]",

        "appServicePlanFunctionAppsName": "[concat('FunctionAppPlan-', variables('name-suffix'))]",
        "functionAppStreamProcessingName": "[concat('IoT-StreamProcessing-', variables('name-suffix'))]",
        "functionAppCosmosDBProcessingName": "[concat('IoT-CosmosDBProcessing-', variables('name-suffix'))]",

        "keyVaultName": "[concat('iot-vault-', variables('name-suffix'))]",

        "storageAccountStreamProcessingName": "[concat('iotfunc1', variables('name-suffix'))]",
        "storageAccountStreamProcessing-website-contentshare": "[concat('iot-streamprocessing-', variables('name-suffix'))]",

        "storageAccountCosmosDBProcessingName": "[concat('iotfunc2', variables('name-suffix'))]",
        "storageAccountCosmosDBProcessing-website-contentshare": "[concat('iot-cosmosdbprocessing-', variables('name-suffix'))]",

        "storageAccountIoTStoreName": "[concat('iotstore', variables('name-suffix'))]",

        "eventHubsNamespaceIoTName": "[concat('iot-namespace-', variables('name-suffix'))]",

        "cosmosDbAccountName": "[concat('cosmos-db-iot-', variables('name-suffix'))]",
        "appInsightsName": "[concat('Cosmos-DB-IoT-Insights-', variables('name-suffix'))]",

        "streamAnalyticsJobName": "[concat('Cosmos-DB-IoT-Analytics-', variables('name-suffix'))]",

        "databricksWorkspaceName": "[concat('iot-databricks-', variables('name-suffix'))]",

        "cosmosDbDatabaseName": "ContosoAuto",
        "cosmosIoTLogicAppName": "[concat('Cosmos-IoT-Logic-', variables('name-suffix'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "labDeployment",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/stephgou/solution-accelerator/master/deploy/labDeploy.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "suffix": {
                        "value": "[variables('name-suffix')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountStreamProcessingName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCosmosDBProcessingName'))]"
            ]
        },
        {
            "type": "microsoft.insights/components",
            "apiVersion": "2015-05-01",
            "name": "[variables('appInsightsName')]",
            "location": "[variables('location')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web"
            },
            "metadata": {
                "description": "This was copied here from labDeploy.json. It needs to be in this template otherwise reference() calls to it will fail on deployment. Yes, this is to work around a bug with Nested ARM Template deployments."
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('storageAccountStreamProcessingName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "Storage",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                    ],
                    "ipRules": [
                    ],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "metadata": {
                "description": "This was copied here from labDeploy.json. It needs to be in this template otherwise reference() calls to it will fail on deployment. Yes, this is to work around a bug with Nested ARM Template deployments."
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('storageAccountCosmosDBProcessingName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "Storage",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                    ],
                    "ipRules": [
                    ],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "metadata": {
                "description": "This was copied here from labDeploy.json. It needs to be in this template otherwise reference() calls to it will fail on deployment. Yes, this is to work around a bug with Nested ARM Template deployments."
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/apis/databases",
            "name": "[concat(variables('cosmosDbAccountName'), '/sql/', variables('cosmosDbDatabaseName'))]",
            "apiVersion": "2016-03-31",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "resource": {
                    "id": "[variables('cosmosDbDatabaseName')]"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('cosmosDbAccountName'), '/sql/', variables('cosmosDbDatabaseName'), '/', 'metadata')]",
            "apiVersion": "2016-03-31",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('cosmosDbAccountName'), 'sql', variables('cosmosDbDatabaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "metadata",
                    "partitionKey": {
                        "paths": [
                            "/partitionKey"
                        ],
                        "kind": "Hash"
                    }
                },
                "options": {
                    "throughput": "50000"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('cosmosDbAccountName'), '/sql/', variables('cosmosDbDatabaseName'), '/', 'telemetry')]",
            "apiVersion": "2016-03-31",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('cosmosDbAccountName'), 'sql', variables('cosmosDbDatabaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "telemetry",
                    "partitionKey": {
                        "paths": [
                            "/partitionKey"
                        ],
                        "kind": "Hash"
                    },
                    "defaultTtl": -1,
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/vin/?"
                            },
                            {
                                "path": "/state/?"
                            },
                            {
                                "path": "/partitionKey/?"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/*"
                            },
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                },
                "options": {
                    "throughput": "15000"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('cosmosDbAccountName'), '/sql/', variables('cosmosDbDatabaseName'), '/', 'maintenance')]",
            "apiVersion": "2016-03-31",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('cosmosDbAccountName'), 'sql', variables('cosmosDbDatabaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "maintenance",
                    "partitionKey": {
                        "paths": [
                            "/vin"
                        ],
                        "kind": "Hash"
                    }
                },
                "options": {
                    "throughput": "400"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('cosmosDbAccountName'), '/sql/', variables('cosmosDbDatabaseName'), '/', 'alerts')]",
            "apiVersion": "2016-03-31",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('cosmosDbAccountName'), 'sql', variables('cosmosDbDatabaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "alerts",
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    }
                },
                "options": {
                    "throughput": "400"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "office365",
            "location": "[variables('location')]",
            "properties": {
                "displayName": "[parameters('RecipientEmail')]",
                "api": {
                    "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('cosmosIoTLogicAppName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', 'office365')]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "type": "Object",
                            "defaultValue": {
                            }
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "consignmentId": {
                                            "type": "string"
                                        },
                                        "customer": {
                                            "type": "string"
                                        },
                                        "delayedVINs": {
                                            "type": "string"
                                        },
                                        "deliveryDueDate": {
                                            "type": "string"
                                        },
                                        "distanceDriven": {
                                            "type": "number"
                                        },
                                        "hasHighValuePackages": {
                                            "type": "boolean"
                                        },
                                        "id": {
                                            "type": "string"
                                        },
                                        "isSummary": {
                                            "type": "boolean"
                                        },
                                        "lastRefrigerationUnitTemperatureReading": {
                                            "type": "integer"
                                        },
                                        "location": {
                                            "type": "string"
                                        },
                                        "lowestPackageStorageTemperature": {
                                            "type": "integer"
                                        },
                                        "odometerBegin": {
                                            "type": "integer"
                                        },
                                        "odometerEnd": {
                                            "type": "number"
                                        },
                                        "plannedTripDistance": {
                                            "type": "number"
                                        },
                                        "recipientEmail": {
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "string"
                                        },
                                        "temperatureSetting": {
                                            "type": "integer"
                                        },
                                        "tripEnded": {
                                            "type": "string"
                                        },
                                        "tripStarted": {
                                            "type": "string"
                                        },
                                        "tripsCompleted": {
                                            "type": "integer"
                                        },
                                        "tripsDelayed": {
                                            "type": "integer"
                                        },
                                        "tripsStarted": {
                                            "type": "integer"
                                        },
                                        "vin": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Condition": {
                            "actions": {
                                "Send_an_alert_summary_email": {
                                    "inputs": {
                                        "body": {
                                            "Body": "<p>Here is a summary of the status of your trips:<br>\n<br>\n<strong>Number of trips that started:</strong> <strong></strong><strong>@{triggerBody()?['tripsStarted']}</strong><strong></strong><br>\n<strong>Number of trips that ended:</strong> @{triggerBody()?['tripsCompleted']}<br>\n<strong>Delayed trips:</strong> @{triggerBody()?['tripsDelayed']}<br>\n<strong>Delayed vehicles (VINs)</strong>: @{triggerBody()?['delayedVINs']}<br>\n<br>\nRegards,<br>\nContoso Auto Bot</p>",
                                            "Subject": "Contoso Auto trip status update (summary): @{triggerBody()?['status']}",
                                            "To": "@triggerBody()?['recipientEmail']"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/v2/Mail"
                                    },
                                    "runAfter": {},
                                    "type": "ApiConnection"
                                }
                            },
                            "else": {
                                "actions": {
                                    "Send_an_individual_alert_email": {
                                        "inputs": {
                                            "body": {
                                                "Body": "<p>Here are the details of the trip and consignment:<br>\n<br>\n<u>CONSIGNMENT INFORMATION</u>:<br>\n<br>\n<strong>Customer:</strong> @{triggerBody()?['customer']}<br>\n<strong>Delivery Due Date:</strong> @{triggerBody()?['deliveryDueDate']}<br>\n<strong>Location:</strong> @{triggerBody()?['location']}<br>\n<strong>Status:</strong> @{triggerBody()?['status']}<br>\n<br>\n<u>TRIP INFORMATION</u>:<br>\n<br>\n<strong>Trip Start Time:</strong> @{triggerBody()?['tripStarted']}<br>\n<strong>Trip End Time:</strong> @{triggerBody()?['tripEnded']}<br>\n<strong>Vehicle (VIN):</strong> @{triggerBody()?['vin']}<br>\n<strong>Planned Trip Distance: </strong>@{triggerBody()?['plannedTripDistance']}<br>\n<strong>Distance Driven:</strong> @{triggerBody()?['distanceDriven']}<br>\n<strong>Start Odometer Reading:</strong> @{triggerBody()?['odometerBegin']}<br>\n<strong>End Odometer Reading:</strong> @{triggerBody()?['odometerEnd']}<br>\n<br>\n<u>PACKAGE INFORMATION</u>:<br>\n<br>\n<strong>Has High Value Packages:</strong> @{triggerBody()?['hasHighValuePackages']}<br>\n<strong>Lowest Package Storage Temp (F):</strong> @{triggerBody()?['lowestPackageStorageTemperature']}<br>\n<strong>Trip Temp Setting (F):</strong> @{triggerBody()?['temperatureSetting']}<br>\n<strong>Last Refrigeration Unit Temp Reading (F):</strong> @{triggerBody()?['lastRefrigerationUnitTemperatureReading']}<br>\n<br>\n<u>REFERENCE INFORMATION</u>:<br>\n<br>\n<strong>Trip ID:</strong> @{triggerBody()?['id']}<br>\n<strong>Consignment ID:</strong> @{triggerBody()?['consignmentId']}<br>\n<strong>Vehicle VIN:</strong> @{triggerBody()?['vin']}<br>\n<br>\nRegards,<br>\nContoso Auto Bot</p>",
                                                "Subject": "Contoso Auto trip status update: @{triggerBody()?['status']}",
                                                "To": "@triggerBody()?['recipientEmail']"
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['office365']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/v2/Mail"
                                        },
                                        "runAfter": {},
                                        "type": "ApiConnection"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['isSummary']",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {},
                            "type": "If"
                        }
                    },
                    "outputs": {
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365": {
                                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/', 'office365')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', 'office365')]",
                                "connectionName": "office365"
                            }
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'CosmosDBConnection')]",
            "apiVersion": "2018-02-14",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "value": "[reference('labDeployment').outputs.CosmosDBConnection.value]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'CosmosDBEndpoint')]",
            "apiVersion": "2018-02-14",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "value": "[reference('labDeployment').outputs.CosmosDBEndpoint.value]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'CosmosDBPrimaryKey')]",
            "apiVersion": "2018-02-14",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "value": "[reference('labDeployment').outputs.CosmosDBPrimaryKey.value]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'IoTHubConnection')]",
            "apiVersion": "2018-02-14",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "value": "[reference('labDeployment').outputs.IoTHubConnection.value]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'ColdStorageAccount')]",
            "apiVersion": "2018-02-14",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "value": "[reference('labDeployment').outputs.ColdStorageAccount.value]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'EventHubsConnection')]",
            "apiVersion": "2018-02-14",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "value": "[reference('labDeployment').outputs.EventHubsConnection.value]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'LogicAppUrl')]",
            "apiVersion": "2018-02-14",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "value": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('cosmosIoTLogicAppName')), '/triggers/manual'), '2016-10-01').value]"
            }
        },

        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[variables('functionAppStreamProcessingName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'CosmosDBConnection')]",
                "[concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'IoTHubConnection')]",
                "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountStreamProcessingName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsDashboard",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountStreamProcessingName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountStreamProcessingName')),'2019-04-01').keys[0].value)]"

                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountStreamProcessingName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountStreamProcessingName')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2014-04-01').InstrumentationKey]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountStreamProcessingName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountStreamProcessingName')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[variables('storageAccountStreamProcessing-website-contentshare')]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~2"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "10.14.1"
                        },

                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        },

                        {
                            "name": "CosmosDBConnection",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'CosmosDBConnection')).secretUriWithVersion, ')')]"
                        },
                        {
                            "name": "IoTHubConnection",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'IoTHubConnection')).secretUriWithVersion, ')')]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[variables('functionAppCosmosDBProcessingName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'CosmosDBConnection')]",
                "[concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'ColdStorageAccount')]",
                "[concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'EventHubsConnection')]",
                "[concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'LogicAppUrl')]",
                "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCosmosDBProcessingName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsDashboard",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountCosmosDBProcessingName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCosmosDBProcessingName')),'2019-04-01').keys[0].value)]"

                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountCosmosDBProcessingName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCosmosDBProcessingName')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2014-04-01').InstrumentationKey]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountCosmosDBProcessingName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCosmosDBProcessingName')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[variables('storageAccountCosmosDBProcessing-website-contentshare')]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~2"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "10.14.1"
                        },

                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        },

                        {
                            "name": "CosmosDBConnection",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'CosmosDBConnection')).secretUriWithVersion, ')')]"
                        },
                        {
                            "name": "ColdStorageAccount",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'ColdStorageAccount')).secretUriWithVersion, ')')]"
                        },
                        {
                            "name": "EventHubsConnection",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'EventHubsConnection')).secretUriWithVersion, ')')]"
                        },
                        {
                            "name": "LogicAppUrl",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'LogicAppUrl')).secretUriWithVersion, ')')]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[variables('iotWebAppName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'CosmosDBConnection')]",
                "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2014-04-01').InstrumentationKey]"
                        },

                        {
                            "name": "CosmosDBConnection",
                            "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '/secrets/', 'CosmosDBConnection')).secretUriWithVersion, ')')]"
                        },
                        {
                            "name": "DatabaseName",
                            "value": "[variables('cosmosDbDatabaseName')]"
                        },
                        {
                            "name": "ContainerName",
                            "value": "metadata"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "CURRENT_STACK",
                            "value": "dotnetcore"
                        }
                    ]
                }
            }
        },



        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "demoDeploy_accessPolicies",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/AzureCosmosDB/solution-accelerator/master/deploy/demoDeploy_accessPolicies.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('keyVaultName')]"
                    },
                    "iotWebAppName": {
                        "value": "[variables('iotWebAppName')]"
                    },
                    "functionAppStreamProcessingName": {
                        "value": "[variables('functionAppStreamProcessingName')]"
                    },
                    "functionAppCosmosDBProcessingName": {
                        "value": "[variables('functionAppCosmosDBProcessingName')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]",
                "[resourceId('Microsoft.Insights/Components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountStreamProcessingName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountCosmosDBProcessingName'))]",
                "[resourceId('Microsoft.Web/sites', variables('iotWebAppName'))]",
                "[resourceId('Microsoft.Web/sites', variables('functionAppStreamProcessingName'))]",
                "[resourceId('Microsoft.Web/sites', variables('functionAppCosmosDBProcessingName'))]"
            ]
        },





        {
            "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
            "apiVersion": "2016-03-01",
            "name": "[concat(variables('streamAnalyticsJobName'), '/cosmosdb')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments/', 'labDeployment')]"
            ],
            "properties": {
                "datasource": {
                    "type": "Microsoft.Storage/DocumentDB",
                    "properties": {
                        "accountId": "[variables('cosmosDbAccountName')]",
                        "accountKey": "[reference('labDeployment').outputs.CosmosDBPrimaryKey.value]",
                        "database": "[variables('cosmosDbDatabaseName')]",
                        "collectionNamePattern": "metadata"
                    }
                }
            }
        }

    ],
    "outputs": {
    }
}
